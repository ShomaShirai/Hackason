import { useState } from 'react';

interface ConnectionError {
    message: string;
    type: 'network' | 'permission' | 'device' | 'server' | 'unknown';
    timestamp: Date;
    retryCount: number;
}

interface ConnectionErrorHandlerProps {
    error: ConnectionError | null;
    onRetry: () => void;
    onDismiss: () => void;
    className?: string;
}

export function ConnectionErrorHandler({
    error,
    onRetry,
    onDismiss,
    className = ''
}: ConnectionErrorHandlerProps) {
    const [showDetails, setShowDetails] = useState(false);

    if (!error) {return null;}

    const getErrorIcon = (type: string) => {
        switch (type) {
            case 'network': return 'üåê';
            case 'permission': return 'üîí';
            case 'device': return 'üìπ';
            case 'server': return 'üñ•Ô∏è';
            default: return '‚ö†Ô∏è';
        }
    };

    const getErrorColor = (type: string) => {
        switch (type) {
            case 'network': return 'bg-orange-500';
            case 'permission': return 'bg-yellow-500';
            case 'device': return 'bg-blue-500';
            case 'server': return 'bg-red-500';
            default: return 'bg-gray-500';
        }
    };

    const getErrorTitle = (type: string) => {
        switch (type) {
            case 'network': return '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº';
            case 'permission': return 'Ê®©Èôê„Ç®„É©„Éº';
            case 'device': return '„Éá„Éê„Ç§„Çπ„Ç®„É©„Éº';
            case 'server': return '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº';
            default: return '„Ç®„É©„Éº';
        }
    };

    const getErrorSuggestions = (type: string) => {
        switch (type) {
            case 'network':
                return [
                    '„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    'Wi-Fi„Åæ„Åü„ÅØÊúâÁ∑öÊé•Á∂ö„ÇíË©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '„Éï„Ç°„Ç§„Ç¢„Ç¶„Ç©„Éº„É´Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
                ];
            case 'permission':
                return [
                    '„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„Åß„Ç´„É°„É©„Å®„Éû„Ç§„ÇØ„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    'URL„Éê„Éº„ÅÆ„Ç´„É°„É©„Ç¢„Ç§„Ç≥„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Ë®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '„Éñ„É©„Ç¶„Ç∂„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
                ];
            case 'device':
                return [
                    '„Ç´„É°„É©„Å®„Éû„Ç§„ÇØ„ÅåÊ≠£Â∏∏„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '‰ªñ„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß„Ç´„É°„É©„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '„Éá„Éê„Ç§„Çπ„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
                ];
            case 'server':
                return [
                    '„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '„Çµ„Éù„Éº„Éà„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ'
                ];
            default:
                return [
                    '„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    '„Éñ„É©„Ç¶„Ç∂„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
                ];
        }
    };

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    };

    return (
        <div className={`bg-red-500/90 backdrop-blur-sm rounded-lg p-4 shadow-lg ${className}`}>
            <div className="flex items-start gap-3">
                <div className={`p-2 rounded-full ${getErrorColor(error.type)}`}>
                    <span className="text-white text-lg">{getErrorIcon(error.type)}</span>
                </div>

                <div className="flex-1">
                    <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white">
                            {getErrorTitle(error.type)}
                        </h3>
                        <div className="flex items-center gap-2">
                            <span className="text-xs text-red-100">
                                {formatTime(error.timestamp)}
                            </span>
                            <button
                                onClick={() => setShowDetails(!showDetails)}
                                className="text-red-100 hover:text-white transition-colors"
                            >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    <p className="text-red-100 mb-3">{error.message}</p>

                    {showDetails && (
                        <div className="mb-3 p-3 bg-red-600/50 rounded">
                            <h4 className="text-sm font-medium text-red-100 mb-2">Ëß£Ê±∫ÊñπÊ≥ï:</h4>
                            <ul className="text-xs text-red-100 space-y-1">
                                {getErrorSuggestions(error.type).map((suggestion, index) => (
                                    <li key={index} className="flex items-start gap-2">
                                        <span className="text-red-200">‚Ä¢</span>
                                        <span>{suggestion}</span>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}

                    <div className="flex items-center gap-2">
                        <button
                            onClick={onRetry}
                            className="px-4 py-2 bg-white text-red-600 rounded-lg font-medium hover:bg-gray-100 transition-colors"
                        >
                            ÂÜçË©¶Ë°å ({error.retryCount}/3)
                        </button>
                        <button
                            onClick={onDismiss}
                            className="px-4 py-2 text-red-100 hover:text-white transition-colors"
                        >
                            Èñâ„Åò„Çã
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
} 